Same as Game Routes, but the DP update is DP[node]=max{1+DP[v]; v has directed edge to node}.

#include <bits/stdc++.h>
using namespace std;
int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int n,m;
    cin>>n>>m;
    vector<vector<int>> g(n+1);
    vector<int> indeg(n+1), dp(n+1), par(n+1,-1);
    while(m--){
        int u,v;
        cin>>u>>v;
        g[u].push_back(v);
        indeg[v]++;
    }
    queue<int> q;
    dp[1]=1;
    for(int i=1;i<=n;i++)
        if(indeg[i]==0)
            q.push(i);
    vector<int> topo;
    while(!q.empty()){
        int u=q.front();q.pop();
        topo.push_back(u);
        for(int v:g[u])
            if(--indeg[v]==0)
                q.push(v);
    }
    for(int u:topo){
        if(dp[u]==0) continue;
        for(int v:g[u]){
            if(dp[u]+1>dp[v]){
                dp[v]=dp[u]+1;
                par[v]=u;
            }
        }
    }
    if(dp[n]==0){
        cout<<"IMPOSSIBLE\n";
        return 0;
    }
    cout<<dp[n]<<"\n";
    vector<int> path;
    for(int v=n;v!=-1;v=par[v])
        path.push_back(v);
    reverse(path.begin(),path.end());
    for(int v:path)
        cout<<v<<" ";
    cout<<"\n";
    return 0;
}
